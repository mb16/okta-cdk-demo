import * as cdktf from "cdktf";
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as okta from "./.gen/providers/okta";
import * as Applications from "./.gen/modules/modules/applications";
import * as AuthServers from "./.gen/modules/modules/auth-servers";

import { Construct } from "constructs";
import { App, CloudBackend, NamedCloudWorkspace, TerraformStack } from "cdktf";


class MyStack extends TerraformStack {
  constructor(scope: Construct, id: string) {
    super(scope, id);

    //Terraform Variables are not always the best fit for getting inputs in the context of Terraform CDK.
//You can read more about this at https://cdk.tf/variables
    const apiToken = new cdktf.TerraformVariable(this, "api_token", {});
    const baseUrl = new cdktf.TerraformVariable(this, "base_url", {});
    const orgName = new cdktf.TerraformVariable(this, "org_name", {});
    const applications = new Applications.Applications(
      this,
      "applications",
      {}
    );
    new AuthServers.AuthServers(this, "auth-servers", {
      customerPortalAppId: applications.customerPortalAppIdOutput,
      oidcClientId: applications.oidcSuperwidgetIdOutput,
    });
    new okta.adminRoleCustom.AdminRoleCustom(this, "app_admin", {
      description: "This role users to manage applications",
      label: "App Admin Role",
      permissions: ["okta.apps.manage"],
    });
    new okta.authenticator.Authenticator(this, "email", {
      key: "okta_email",
      name: "Email",
      settings:
        '${jsonencode (\n\t\t{\n\t\t\t"allowedFor": "any"\n\t\t\t"tokenLifetimeInMinutes" : 5\n\t\t}\n\t)}',
    });
    new okta.authenticator.Authenticator(this, "webauthn", {
      key: "webauthn",
      name: "Web AuthN",
    });
    new okta.group.Group(this, "dmzadmin_group", {
      description:
        "Group that contains employees that are responsible for DMZ Servers",
      name: "DMZ Server Admins",
    });
    new okta.group.Group(this, "service_accounts", {
      description:
        "Group that contains all users that represent Service Accounts",
      name: "Okta Service Accounts",
    });

    new okta.group.Group(this, "michaels_group", {
      description:
        "Group to verify CDK",
      name: "Michael's Group",
    });

    const oktaGroupTestGroup = new okta.group.Group(this, "test_group", {
      description: "For testing and demonstration",
      name: "Renamed Test Group",
    });
    new okta.groupRule.GroupRule(this, "dmzadmin_grouprule", {
      expressionType: "urn:okta:expression:1.0",
      expressionValue: 'user.department=="DMZ Ops"',
      groupAssignments: ["${resource.okta_group.dmzadmin_group.id}"],
      name: "DMZ Admins",
      status: "ACTIVE",
    });
    new okta.groupRule.GroupRule(this, "test_rule", {
      expressionType: "urn:okta:expression:1.0",
      expressionValue: 'String.startsWith(user.firstName,"somename")',
      groupAssignments: [oktaGroupTestGroup.id],
      name: "Test Rule",
      status: "ACTIVE",
    });
    new okta.inlineHook.InlineHook(this, "validate_client_id_registration", {
      auth: {
        key: "Authorization",
        type: "HEADER",
        value: "1234",
      },
      channel: {
        method: "POST",
        type: "HTTP",
        uri: "https://iatcoreapim.azure-api.net/okta/registration",
        version: "1.0.0",
      },
      name: "Validate Client ID on Registration",
      status: "ACTIVE",
      type: "com.okta.user.pre-registration",
      version: "1.0.0",
    });
    new okta.networkZone.NetworkZone(this, "blacklisted_countries", {
      dynamicLocations: ["AF", "IR", "KP"],
      name: "Blacklisted Countries",
      type: "DYNAMIC",
    });
    new okta.networkZone.NetworkZone(this, "corporate_locations", {
      dynamicLocations: ["BS", "JM"],
      name: "Corporate Locations",
      type: "DYNAMIC",
    });
    new okta.networkZone.NetworkZone(this, "tor_blocker", {
      dynamicProxyType: "TorAnonymizer",
      name: "TOR Blocker",
      type: "DYNAMIC",
      usage: "BLOCKLIST",
    });
    new okta.trustedOrigin.TrustedOrigin(this, "customer_portal_local", {
      name: "customerportal.local",
      origin: "https://localhost:44369/",
      scopes: ["CORS"],
    });
    new okta.trustedOrigin.TrustedOrigin(this, "super_widget", {
      name: "super-widget",
      origin: "https://super-widget.oktaprise.com",
      scopes: ["CORS", "REDIRECT"],
    });
    new okta.user.User(this, "okta_terraform_admin", {
      department: "DMZ Ops",
      email: "OktaTerraformAdmin@iatcore.com",
      firstName: "Okta",
      lastName: "Terraform Admin",
      login: "OktaTerraformAdmin@iatcore.com",
      status: "ACTIVE",
    });
    new okta.userSchemaProperty.UserSchemaProperty(this, "clientId", {
      description: "Stores the customer's account ID",
      index: "clientId",
      master: "OKTA",
      permissions: "READ_WRITE",
      scope: "SELF",
      title: "Client ID",
      type: "string",
    });
    new okta.userSchemaProperty.UserSchemaProperty(this, "crn_extension", {
      index: "customer_reference_number",
      master: "PROFILE_MASTER",
      required: false,
      title: "Customer Reference Number",
      type: "string",
    });
    new okta.userSchemaProperty.UserSchemaProperty(this, "isVerified", {
      description: "Stores whether the user has been verified as a customer",
      index: "isVerified",
      master: "OKTA",
      permissions: "READ_WRITE",
      scope: "SELF",
      title: "Is Verified?",
      type: "boolean",
    });
    new okta.provider.OktaProvider(this, "okta", {
      apiToken: apiToken.value,
      baseUrl: baseUrl.value,
      orgName: orgName.value,
    });
  }
}


const app = new App();
const stack = new MyStack(app, "okta-cdk-demo");


new CloudBackend(stack, {
  hostname: "app.terraform.io",
  organization: "dev-05844969-okta-com-DEV",
  workspaces: new NamedCloudWorkspace("okta-cdk-demo"),
});


app.synth();
